/**
 * Draws a rounded rectangle using the current state of the canvas. 
 * If you omit the last three params, it will draw a rectangle 
 * outline with a 5 pixel border radius 
 * @param {CanvasRenderingContext2D} ctx
 * @param {Number} x The top left x coordinate
 * @param {Number} y The top left y coordinate 
 * @param {Number} width The width of the rectangle 
 * @param {Number} height The height of the rectangle
 * @param {Number} radius The corner radius. Defaults to 5;
 * @param {Boolean} fill Whether to fill the rectangle. Defaults to false.
 * @param {Boolean} stroke Whether to stroke the rectangle. Defaults to true.
 */
function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof stroke == "undefined" ) {
    stroke = true;
  }
  if (typeof radius === "undefined") {
    radius = 5;
  }
  
  width = width<2*radius?2*radius:width;
  height = height<2*radius?2*radius:height;
  
  ctx.beginPath();
  ctx.arc(x + radius, y+radius, radius, 0, 2 * Math.PI, false);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }    
 
  ctx.beginPath();   
  ctx.arc(x + width - radius, y+radius, radius, 0, 2 * Math.PI, false);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }    
  
  ctx.beginPath();
  ctx.arc(x + radius, y+height-radius, radius, 0, 2 * Math.PI, false);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }    
  
  ctx.beginPath();
  ctx.arc(x + width - radius, y+height-radius, radius, 0, 2 * Math.PI, false);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }    
  
  ctx.beginPath();
  ctx.rect(x+radius, y, width-radius*2, height);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }   
  
  ctx.beginPath();
  ctx.rect(x, y+radius, width, height-radius*2);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }     
  
      
}

